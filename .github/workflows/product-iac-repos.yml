name: product-iac-repos

on:
  push:
    branches:
      - ammar
    paths:
      - .github/workflows/product-iac-repos.yml
      - iac/terraform/product-iac-repos/workloads/**
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

defaults:
  run:
    shell: bash

jobs:
  configure:
    name: Configure
    runs-on: ubuntu-latest
    outputs:
      base_sha: ${{ env.GIT_BASE_SHA }}
    steps:

      - name: Fetch repository history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Determine commit SHA to compare against
        run: |
          if [ "${{ github.ref }}" == "refs/heads/ammar" ]; then
            GIT_BASE_SHA=$(git log --format=format:%H --merges --skip 1 -1)
          else
            GIT_BASE_SHA=$(git log --format=format:%H --merges -1)
          fi

          echo "GIT_BASE_SHA=${GIT_BASE_SHA}"
          echo "GIT_BASE_SHA=${GIT_BASE_SHA}" >> $GITHUB_ENV
  
  determine_changes:
    name: Determining Changes
    runs-on: ubuntu-latest
    needs: configure
    outputs:
      matrix_layer_0_dev: ${{ env.MATRIX_LAYER_0_DEV }}
      LAYER_0_DEV_CHANGES: ${{ env.LAYER_0_DEV_CHANGES }}
      LAYER_1_DEV_CHANGES: ${{ env.LAYER_1_DEV_CHANGES }}
      LAYER_0_TEST_CHANGES: ${{ env.LAYER_0_TEST_CHANGES }}
      LAYER_1_TEST_CHANGES: ${{ env.LAYER_1_TEST_CHANGES }}
      LAYER_0_PROD_CHANGES: ${{ env.LAYER_0_PROD_CHANGES }}
      LAYER_1_PROD_CHANGES: ${{ env.LAYER_1_PROD_CHANGES }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ammar
          fetch-depth: 0

      # - name: Finding Github Changes
      #   id: github_changes
      #   run: |
      #     last_commit=$(git log --format="%H" -n 1)
      #     second_last_commit=$(git log --format="%H" -n 2 | tail -n 1)
      #     LAYER_0_DEV_CHANGES=$(git diff --name-only $second_last_commit $last_commit -- ':iac/terraform/product-iac-repos/**' ':!**/prod/**' ':!**/dev/**' ':!**/test/**' ':!**/layer_1/**' ':!**/layer_0/**' ':!.github/**')
      #     echo "Github File Changes:"
      #     echo "$LAYER_0_DEV_CHANGES"

      #     if [ -n "$LAYER_0_DEV_CHANGES" ]; then
      #       LAYER_0_DEV_CHANGES=$(echo "$LAYER_0_DEV_CHANGES" | tr '\n' ',' | jq -cRs 'split(",") | .[:-1]')
      #     else
      #       LAYER_0_DEV_CHANGES=[]
      #     fi

      #     echo "LAYER_0_DEV_CHANGES=${LAYER_0_DEV_CHANGES}" >> $GITHUB_ENV
      
      - name: Check all layer_0_dev subdirectories
        id: layer_0_dev_subdirectories
        run: |
          SUBDIR_LAYER_0_DEV_JSON=$(find ./iac/terraform/product-iac-repos/workloads/ -not -path '*/github/*' -not -path '*/test/*' -not -path '*/prod/*' -name '*layer_0' -maxdepth 3 -mindepth 3 -type d | sort | jq -cMRs 'split("\n") | .[0:-1]')
          echo "MATRIX_LAYER_0_DEV=${SUBDIR_LAYER_0_DEV_JSON}"
          echo "MATRIX_LAYER_0_DEV=${SUBDIR_LAYER_0_DEV_JSON}" >> $GITHUB_ENV
      
      - name: Finding Layer 0 DEV Changes
        id: layer_0_dev_changes
        run: |
          last_commit=$(git log --format="%H" -n 1)
          second_last_commit=$(git log --format="%H" -n 2 | tail -n 1)
          LAYER_0_DEV_CHANGES=$(git diff --name-only $second_last_commit $last_commit -- ':iac/terraform/product-iac-repos/**' ':!**/prod/**' ':!**/test/**' ':!**/layer_1/**' ':!**/github/**' ':!.github/**' | jq -cMRs 'split("\n") | .[0:-1]')
          echo "Layer 0 DEV File Changes:"
          echo "$LAYER_0_DEV_CHANGES"

          if [ ${#LAYER_0_DEV_CHANGESy[@]} -gt 0 ]; then
            LAYER_0_DEV_CHANGES=$(echo $LAYER_0_DEV_CHANGES | tr '\n' ',' | jq -cRs 'split(",") | .[:-1]')
            # LAYER_0_DEV_CHANGES=$(echo $LAYER_0_DEV_CHANGES | jq 'map(. | rtrimstr("/" + split("/")[-1])) | map("./" + .)' | sed 's/\"/\"/g')
          fi


          echo "LAYER_0_DEV_CHANGES=${LAYER_0_DEV_CHANGES}"
          echo "LAYER_0_DEV_CHANGES=${LAYER_0_DEV_CHANGES}" >> $GITHUB_ENV
      
      - name: Finding Layer 1 DEV Changes
        id: layer_1_dev_changes
        run: |
          last_commit=$(git log --format="%H" -n 1)
          second_last_commit=$(git log --format="%H" -n 2 | tail -n 1)
          LAYER_1_DEV_CHANGES=$(git diff --name-only $second_last_commit $last_commit -- ':iac/terraform/product-iac-repos/**' ':!**/prod/**' ':!**/test/**' ':!**/layer_0/**' ':!**/github/**' ':!.github/**')
          echo "Layer 1 DEV File Changes:"
          echo "$LAYER_1_DEV_CHANGES"
          
          if [ -n "$LAYER_1_DEV_CHANGES" ]; then
            LAYER_1_DEV_CHANGES=$(echo "$LAYER_1_DEV_CHANGES" | tr '\n' ',' | jq -cRs 'split(",") | .[:-1]')
          else
            LAYER_1_DEV_CHANGES=[]
          fi

          echo "LAYER_1_DEV_CHANGES=${LAYER_1_DEV_CHANGES}" >> $GITHUB_ENV
      
      - name: Finding Layer 0 TEST Changes
        id: layer_0_test_changes
        run: |
          last_commit=$(git log --format="%H" -n 1)
          second_last_commit=$(git log --format="%H" -n 2 | tail -n 1)
          LAYER_0_TEST_CHANGES=$(git diff --name-only $second_last_commit $last_commit -- ':iac/terraform/product-iac-repos/**' ':!**/prod/**' ':!**/dev/**' ':!**/layer_1/**' ':!**/github/**' ':!.github/**')
          echo "Layer 0 TEST File Changes:"
          echo "$LAYER_0_TEST_CHANGES"
          
          if [ -n "$LAYER_0_TEST_CHANGES" ]; then
            LAYER_0_TEST_CHANGES=$(echo "$LAYER_0_TEST_CHANGES" | tr '\n' ',' | jq -cRs 'split(",") | .[:-1]')
          else
            LAYER_0_TEST_CHANGES=[]
          fi

          echo "LAYER_0_TEST_CHANGES=${LAYER_0_TEST_CHANGES}" >> $GITHUB_ENV
      
      - name: Finding Layer 1 TEST Changes
        id: layer_1_test_changes
        run: |
          last_commit=$(git log --format="%H" -n 1)
          second_last_commit=$(git log --format="%H" -n 2 | tail -n 1)
          LAYER_1_TEST_CHANGES=$(git diff --name-only $second_last_commit $last_commit -- ':iac/terraform/product-iac-repos/**' ':!**/prod/**' ':!**/dev/**' ':!**/layer_0/**' ':!**/github/**' ':!.github/**')
          echo "Layer 1 TEST File Changes:"
          echo "$LAYER_1_TEST_CHANGES"
          
          if [ -n "$LAYER_1_TEST_CHANGES" ]; then
            LAYER_1_TEST_CHANGES=$(echo "$LAYER_1_TEST_CHANGES" | tr '\n' ',' | jq -cRs 'split(",") | .[:-1]')
          else
            LAYER_1_TEST_CHANGES=[]
          fi

          echo "LAYER_1_TEST_CHANGES=${LAYER_1_TEST_CHANGES}" >> $GITHUB_ENV
      
      - name: Finding Layer 0 PROD Changes
        id: layer_0_prod_changes
        run: |
          last_commit=$(git log --format="%H" -n 1)
          second_last_commit=$(git log --format="%H" -n 2 | tail -n 1)
          LAYER_0_PROD_CHANGES=$(git diff --name-only $second_last_commit $last_commit -- ':iac/terraform/product-iac-repos/**' ':!**/test/**' ':!**/dev/**' ':!**/layer_1/**' ':!**/github/**' ':!.github/**')
          echo "Layer 0 PROD File Changes:"
          echo "$LAYER_0_PROD_CHANGES"
          
          if [ -n "$LAYER_0_PROD_CHANGES" ]; then
            LAYER_0_PROD_CHANGES=$(echo "$LAYER_0_PROD_CHANGES" | tr '\n' ',' | jq -cRs 'split(",") | .[:-1]')
          else
            LAYER_0_PROD_CHANGES=[]
          fi

          echo "LAYER_0_PROD_CHANGES=${LAYER_0_PROD_CHANGES}" >> $GITHUB_ENV
      
      - name: Finding Layer 1 PROD Changes
        id: layer_1_prod_changes
        run: |
          last_commit=$(git log --format="%H" -n 1)
          second_last_commit=$(git log --format="%H" -n 2 | tail -n 1)
          LAYER_1_PROD_CHANGES=$(git diff --name-only $second_last_commit $last_commit -- ':iac/terraform/product-iac-repos/**' ':!**/test/**' ':!**/dev/**' ':!**/layer_0/**' ':!**/github/**' ':!.github/**')
          echo "Layer 1 PROD File Changes:"
          echo "$LAYER_1_PROD_CHANGES"
          
          if [ -n "$LAYER_1_PROD_CHANGES" ]; then
            LAYER_1_PROD_CHANGES=$(echo "$LAYER_1_PROD_CHANGES" | tr '\n' ',' | jq -cRs 'split(",") | .[:-1]')
          else
            LAYER_1_PROD_CHANGES=[]
          fi

          echo "LAYER_1_PROD_CHANGES=${LAYER_1_PROD_CHANGES}" >> $GITHUB_ENV


  # deploy_github_repos:
  #   name: Deploy - GitHub Repos
  #   uses: CPC-SCP/iep-reusable-gha-workflows/.github/workflows/terraform-workflow.yml@main
  #   secrets: inherit
  #   needs:
  #     - configure
  #   if: needs.configure.outputs.MATRIX_GITHUB!= '[]'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       directory: ${{ fromJson(needs.configure.outputs.matrix_github) }}
  #   with:
  #     environment: product-iac-repos-github
  #     tf_exec_aws_region: ${{ vars.TF_EXEC_AWS_REGION }}
  #     tf_exec_role_arn: ${{ vars.TF_EXEC_ROLE_ARN }}
  #     tf_version: 1.5
  #     tf_working_dir: ${{ matrix.directory }}

  layer_0_deploy_dev:
    name: Layer 0 - Deploy - Dev
    runs-on: ubuntu-latest
    # uses: CPC-SCP/iep-reusable-gha-workflows/.github/workflows/terraform-workflow.yml@main
    # secrets: inherit
    needs:
      - determine_changes
    if: ${{ needs.determine_changes.outputs.LAYER_0_DEV_CHANGES != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.determine_changes.outputs.LAYER_0_DEV_CHANGES) }}
    steps:
      - name: Layer 0 - Deploy - Dev
        run: |
          # exit 1
          echo "Layer 0 - Deploy - Dev ${{ matrix.directory }}"
          echo ${{ needs.determine_changes.outputs.LAYER_0_DEV_CHANGES }}
          echo ${{ needs.configure.outputs.matrix_layer_0_dev }}
    # with:
    #   environment: product-iac-repos-dev
    #   tf_exec_aws_region: ${{ vars.TF_EXEC_AWS_REGION }}
    #   tf_exec_role_arn: ${{ vars.TF_EXEC_ROLE_ARN }}
    #   tf_version: 1.5
    #   tf_working_dir: ${{ matrix.directory }}

  layer_1_deploy_dev:
    name: Layer 1 - Deploy - Dev
    runs-on: ubuntu-latest
    # uses: CPC-SCP/iep-reusable-gha-workflows/.github/workflows/terraform-workflow.yml@main
    # secrets: inherit
    needs:
      - layer_0_deploy_dev
    # if: always()
    if: ${{ always() && needs.determine_changes.outputs.LAYER_1_DEV_CHANGES != '[]' && needs.layer_0_deploy_dev.result != 'failure' }}
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     directory: ${{ fromJson(needs.determine_changes.outputs.LAYER_1_DEV_CHANGES) }}
    steps:
      - name: Layer 1 - Deploy - Dev
        run: |
          echo "Layer 1 - Deploy - Dev"
          echo ${{ needs.determine_changes.outputs.LAYER_1_DEV_CHANGES }}
          echo ${{ needs.layer_0_deploy_dev.result }}
    # with:
    #   environment: product-iac-repos-dev
    #   tf_exec_aws_region: ${{ vars.TF_EXEC_AWS_REGION }}
    #   tf_exec_role_arn: ${{ vars.TF_EXEC_ROLE_ARN }}
    #   tf_version: 1.5
    #   tf_working_dir: ${{ matrix.directory }}

  layer_0_deploy_test:
    name: Layer 0 - Deploy - Test
    runs-on: ubuntu-latest
    # uses: CPC-SCP/iep-reusable-gha-workflows/.github/workflows/terraform-workflow.yml@main
    # secrets: inherit
    needs:
      - determine_changes
    if: ${{ needs.determine_changes.outputs.LAYER_0_TEST_CHANGES != '[]' }}
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     directory: ${{ fromJson(needs.determine_changes.outputs.LAYER_0_TEST_CHANGES) }}
    steps:
      - name: Layer 0 - Deploy - Test
        run: |
          echo "Layer 0 - Deploy - Test"
    # with:
    #   environment: product-iac-repos-test
    #   tf_exec_aws_region: ${{ vars.TF_EXEC_AWS_REGION }}
    #   tf_exec_role_arn: ${{ vars.TF_EXEC_ROLE_ARN }}
    #   tf_version: 1.5
    #   tf_working_dir: ${{ matrix.directory }}

  layer_1_deploy_test:
    name: Layer 1 - Deploy - Test
    runs-on: ubuntu-latest
    # uses: CPC-SCP/iep-reusable-gha-workflows/.github/workflows/terraform-workflow.yml@main
    # secrets: inherit
    needs:
      - determine_changes
    if: ${{ needs.determine_changes.outputs.LAYER_1_TEST_CHANGES != '[]' }}
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     directory: ${{ fromJson(needs.determine_changes.outputs.LAYER_1_TEST_CHANGES) }}
    steps:
      - name: Layer 1 - Deploy - Test
        run: |
          echo "Layer 1 - Deploy - Test"
    # with:
    #   environment: product-iac-repos-test
    #   tf_exec_aws_region: ${{ vars.TF_EXEC_AWS_REGION }}
    #   tf_exec_role_arn: ${{ vars.TF_EXEC_ROLE_ARN }}
    #   tf_version: 1.5
    #   tf_working_dir: ${{ matrix.directory }}

  layer_0_deploy_prod:
    name: Layer 0 - Deploy - Prod
    runs-on: ubuntu-latest
    # uses: CPC-SCP/iep-reusable-gha-workflows/.github/workflows/terraform-workflow.yml@main
    # secrets: inherit
    needs:
      - determine_changes
    if: ${{ needs.determine_changes.outputs.LAYER_0_PROD_CHANGES != '[]' }}
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     directory: ${{ fromJson(needs.determine_changes.outputs.LAYER_0_PROD_CHANGES) }}
    steps:
      - name: Layer 0 - Deploy - Prod
        run: |
          echo "Layer 0 - Deploy - Prod"
    # with:
    #   environment: product-iac-repos-prod
    #   tf_exec_aws_region: ${{ vars.TF_EXEC_AWS_REGION }}
    #   tf_exec_role_arn: ${{ vars.TF_EXEC_ROLE_ARN }}
    #   tf_version: 1.5
    #   tf_working_dir: ${{ matrix.directory }}

  layer_1_deploy_prod:
    name: Layer 1 - Deploy - Prod
    runs-on: ubuntu-latest
    # uses: CPC-SCP/iep-reusable-gha-workflows/.github/workflows/terraform-workflow.yml@main
    # secrets: inherit
    needs:
      - determine_changes
    if: ${{ needs.determine_changes.outputs.LAYER_1_PROD_CHANGES != '[]' }}
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     directory: ${{ fromJson(needs.determine_changes.outputs.LAYER_1_PROD_CHANGES) }}
    steps:
      - name: Layer 1 - Deploy - Prod
        run: |
          echo "Layer 1 - Deploy - Prod"
    # with:
    #   environment: product-iac-repos-prod
    #   tf_exec_aws_region: ${{ vars.TF_EXEC_AWS_REGION }}
    #   tf_exec_role_arn: ${{ vars.TF_EXEC_ROLE_ARN }}
    #   tf_version: 1.5
    #   tf_working_dir: ${{ matrix.directory }}