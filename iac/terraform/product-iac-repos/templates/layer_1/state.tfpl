# Â© 2024 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.

# This AWS Content is provided subject to the terms of the AWS Customer Agreement
# available at http://aws.amazon.com/agreement or other written agreement between
# Customer and either Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

${autogen_warning}

resource "aws_dynamodb_table" "state" {
  # checkov:skip=CKV_AWS_119:CMK encryption judged unnecessary for a DDB table which stores only locks, nothing remotely secret
  # checkov:skip=CKV_AWS_28:PITR is not required for DDB lock table

  name         = "${repo_name}-${env_name}-tf-locking"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "LockID"

  attribute {
    name = "LockID"
    type = "S"
  }

  tags = {
    Name = "${repo_name}-${env_name}-tf-locking"
  }

  lifecycle {
    ignore_changes = all
  }
}


####################################################################################################
# S3 Bucket for State - New
####################################################################################################
module "state_bucket" {
  source = "github.com/CPC-SCP/terraform-aws-s3.git//modules/s3?ref=v0.13.0"

  descriptor = "tf-state"
}


%{~ if !enable_legacy_bucket_cleanup }
####################################################################################################
# S3 Bucket for State - Current
#
# This block is temporary and allows us to retain the existing S3 bucket alongside the new bucket,
# without having to drop it from state. Once a CR to migrate has completed, we can remove this
# block and instead rely on the module call above.
####################################################################################################
%{~ if !enable_legacy_bucket_cleanup && enable_replication }
data "aws_iam_policy_document" "replication" {
  statement {
    actions = [
      "s3:GetReplicationConfiguration",
      "s3:ListBucket",
      "s3:PutInventoryConfiguration",
    ]

    effect    = "Allow"
    resources = [aws_s3_bucket.state.arn]
  }

  statement {
    actions = [
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectTagging",
      "s3:GetObjectVersion",
      "s3:GetObjectVersionAcl",
      "s3:GetObjectVersionForReplication",
      "s3:GetObjectVersionTagging",
      "s3:InitiateReplication",
      "s3:PutObject",
    ]

    effect    = "Allow"
    resources = ["$${aws_s3_bucket.state.arn}/*"]
  }

  statement {
    actions = [
      "s3:DeleteObjectTagging",
      "s3:DeleteObjectVersionTagging",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutObjectTagging",
      "s3:PutObjectVersionAcl",
      "s3:PutObjectVersionTagging",
      "s3:ReplicateDelete",
      "s3:ReplicateObject",
      "s3:ReplicateTags",
      "s3:RestoreObject",
    ]

    effect    = "Allow"
    resources = ["$${module.state_bucket.s3_bucket.arn}/*"]
  }
}

data "aws_iam_policy_document" "replication_assume" {
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      type        = "Service"
      identifiers = [
        "batchoperations.s3.amazonaws.com",
        "s3.amazonaws.com",
      ]
    }
  }
}

resource "aws_iam_policy" "replication" {
  name   = "${naming_prefix}-replication"
  policy = data.aws_iam_policy_document.replication.json
}

resource "aws_iam_role" "replication" {
  name               = "${naming_prefix}-replication"
  assume_role_policy = data.aws_iam_policy_document.replication_assume.json
}

resource "aws_iam_role_policy_attachment" "replication" {
  role       = aws_iam_role.replication.name
  policy_arn = aws_iam_policy.replication.arn
}

resource "aws_s3_bucket_replication_configuration" "replication" {
  depends_on = [aws_s3_bucket_versioning.state]

  bucket = aws_s3_bucket.state.id
  role   = aws_iam_role.replication.arn

  rule {
    delete_marker_replication {
      status = "Enabled"
    }

    destination {
      bucket        = module.state_bucket.s3_bucket.arn
      storage_class = "STANDARD"
    }

    filter {
      prefix = ""
    }

    id     = "state_replication"
    status = "Enabled"
  }
}
%{~ endif ~}

resource "aws_s3_bucket" "state" {
  # checkov:skip=CKV_AWS_144:Cross-Region replication not required for a state storage bucket
  # checkov:skip=CKV2_AWS_61:Lifecycle Configuration not require for a state storage bucket
  # checkov:skip=CKV2_AWS_62:No requirement for event notifications on a state storage bucket
  # checkov:skip=CKV_AWS_145:SSE-S3 judged sufficient for a state storage bucket
  bucket = "${bucket_name_prefix}-tf-state-${account_id}-${aws_region}"

  tags = {
    Name = "${bucket_name_prefix}-tf-state-${account_id}-${aws_region}"
  }

  lifecycle {
    ignore_changes = all
  }
}

resource "aws_s3_bucket_logging" "state" {
  bucket        = aws_s3_bucket.state.id
  target_bucket = "aws-accelerator-s3-access-logs-${account_id}-${aws_region}"
  target_prefix = "${bucket_name_prefix}-tf-state-${account_id}-${aws_region}/"

  lifecycle {
    ignore_changes = all
  }
}

resource "aws_s3_bucket_public_access_block" "state" {
  bucket                  = aws_s3_bucket.state.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true

  lifecycle {
    ignore_changes = all
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "state" {
  bucket = aws_s3_bucket.state.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
    }
  }

  lifecycle {
    ignore_changes = all
  }
}

resource "aws_s3_bucket_versioning" "state" {
  bucket = aws_s3_bucket.state.id

  versioning_configuration {
    status = "Enabled"
  }

  lifecycle {
    ignore_changes = all
  }
}
%{~ endif }
